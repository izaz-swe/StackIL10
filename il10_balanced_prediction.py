# -*- coding: utf-8 -*-
"""IL10_Balanced_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19Zca97frtc7H_5rssz7EAgR8dxV6a3tW
"""

import pandas as pd
import numpy as np
from numpy import mean
from numpy import std
import matplotlib.pyplot as plt
from imblearn.over_sampling import SMOTE
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score, cross_val_predict
from sklearn.metrics import confusion_matrix, accuracy_score, matthews_corrcoef, roc_auc_score
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from lightgbm import LGBMClassifier
from sklearn.ensemble import StackingClassifier

from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import Flatten
from keras.layers.convolutional import Conv1D
from keras.layers.convolutional import MaxPooling1D

estimators= [('RF', RandomForestClassifier()), ('XGB', XGBClassifier()), ('DT', DecisionTreeClassifier()), ('SVM', SVC()), ('KNN', KNeighborsClassifier()), ('LR', LogisticRegression()), ('LGBM', LGBMClassifier())]
stack = StackingClassifier( estimators=estimators, final_estimator= LogisticRegression())

"""#**AAC_IL10**"""

from google.colab import drive
drive.mount('/content/drive')

AAC_ILTrain  = pd.read_csv('/content/drive/MyDrive/res/IL-10/coding/data_set/imbalanced_data/AAC.csv')

AAC_ILTrain.shape

AAC_ILTrain['Target'].dtypes

for column in AAC_ILTrain.columns:
  if column == 'Target':
    AAC_ILTrain[column] = AAC_ILTrain[column].astype('category')
  AAC_ILTrain[column] = pd.to_numeric(AAC_ILTrain[column], errors='coerce')
  if column == 'Target':
    AAC_ILTrain[column] = AAC_ILTrain[column].astype('category')
AAC_ILTrain.fillna(0, inplace=True)

X = AAC_ILTrain.drop(['Target'], axis=1)
y = AAC_ILTrain.Target

y.value_counts()

"""**Code Testing Purpose**"""

import pandas as pd
from imblearn.over_sampling import ADASYN

# Assuming you have your original dataset stored in a DataFrame called 'original_data'

# Separate the features and target variable
X = AAC_ILTrain.drop(['Target'], axis=1)
y = AAC_ILTrain.Target

# Apply ADASYN oversampling technique
adasyn = ADASYN()
X_oversampled, y_oversampled = adasyn.fit_resample(X, y)

# Combine the oversampled features and target variable into a new DataFrame
oversampled_data = pd.concat([X_oversampled, y_oversampled], axis=1)

# Save the oversampled data as a CSV file
oversampled_data.to_csv('Demo_Metrics.csv', index=False)

y.value_counts()

from imblearn.over_sampling import ADASYN
ada = ADASYN(random_state=42)
X, y = ada.fit_resample(X, y)

X.shape

y.value_counts()

# X = AAC_ILTrain.drop(['Target'], axis=1)
# y = AAC_ILTrain.Target
AAC_ILTrain_Metrics = []
AAC_ILTrain_Metrics = pd.DataFrame(AAC_ILTrain_Metrics)
AAC_ILTrain_Metrics['Classifier'] = 'Classifier'
AAC_ILTrain_Metrics['Accuracy'] = 'Accuracy'
AAC_ILTrain_Metrics['mcc'] = 'mcc'
AAC_ILTrain_Metrics['auc'] = 'auc'
AAC_ILTrain_Metrics['sensitivity'] = 'sensitivity'
AAC_ILTrain_Metrics['specificity'] = 'specificity'

cv = KFold(n_splits=10, random_state=1, shuffle=True)

# create model


models = [LogisticRegression(penalty='l2',tol=0.0006,
                           C=3, fit_intercept=True, intercept_scaling=1.0,
                           class_weight=None, random_state=10),
          RandomForestClassifier(n_estimators=100,criterion='entropy',max_features='sqrt',random_state=10),
          SVC(probability=True),
          XGBClassifier(),
          DecisionTreeClassifier(),
          KNeighborsClassifier(),
          LGBMClassifier(),
          stack]

for model in models:
  # evaluate model
  # scores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)
  y_pred = cross_val_predict(model, X, y, cv
                             =cv, n_jobs=-1)
  y_proba = cross_val_predict(model, X, y, cv
                             =cv, method='predict_proba')
  cm1 = confusion_matrix(y, y_pred)
  # report performance
  Accuracy = accuracy_score(y, y_pred)
  mcc = matthews_corrcoef(y, y_pred)
  auc = roc_auc_score(y, y_pred)
  sensitivity = cm1[0,0]/(cm1[0,0]+cm1[0,1])
  specificity = cm1[1,1]/(cm1[1,0]+cm1[1,1])
  AAC_ILTrain_Metrics.loc[len(AAC_ILTrain_Metrics.index)] = [model,Accuracy, mcc, auc, sensitivity,specificity]

AAC_ILTrain_Metrics.to_csv("/content/drive/MyDrive/res/IL-10/coding/data_set/balanced_result/AAC_ILTrain_Metrics.csv")
clf = StackingClassifier( estimators=estimators, final_estimator=LogisticRegression())
prob = clf.fit_transform(X, y)
pd.DataFrame(prob).to_csv("/content/drive/MyDrive/res/IL-10/coding/data_set/balanced_result/AAC_ILTrain_Probability.csv")

AAC_ILTrain_Metrics

print(prob)

"""#**APAAC_IL10**"""

APAAC_ILTrain  = pd.read_csv('/content/drive/MyDrive/res/IL-10/coding/data_set/imbalanced_data/APAAC.csv')

for column in APAAC_ILTrain.columns:
  APAAC_ILTrain[column] = pd.to_numeric(APAAC_ILTrain[column], errors='coerce')
  if column == 'Target':
    APAAC_ILTrain[column] = APAAC_ILTrain[column].astype('category')

APAAC_ILTrain.fillna(0, inplace=True)
APAAC_ILTrain.dtypes

APAAC_ILTrain.shape

"""Data balancing"""

X = APAAC_ILTrain.drop(['Target'], axis=1)
y = APAAC_ILTrain.Target
from imblearn.over_sampling import ADASYN
ada = ADASYN(random_state=42)
X, y = ada.fit_resample(X, y)

y.value_counts()

# X = APAAC_ILTrain.drop(['Target'], axis=1)
# y = APAAC_ILTrain.Target
APAAC_ILTrain_Metrics = []
APAAC_ILTrain_Metrics = pd.DataFrame(APAAC_ILTrain_Metrics)
APAAC_ILTrain_Metrics['Classifier'] = 'Classifier'
APAAC_ILTrain_Metrics['Accuracy'] = 'Accuracy'
APAAC_ILTrain_Metrics['mcc'] = 'mcc'
APAAC_ILTrain_Metrics['auc'] = 'auc'
APAAC_ILTrain_Metrics['sensitivity'] = 'sensitivity'
APAAC_ILTrain_Metrics['specificity'] = 'specificity'
cv = KFold(n_splits=10, random_state=1, shuffle=True)
# create model
models = [LogisticRegression(),
          RandomForestClassifier(),
          SVC(),
          XGBClassifier(),
          DecisionTreeClassifier(),
          KNeighborsClassifier(),
          LGBMClassifier(),
          stack]
for model in models:
  # evaluate model
  # scores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)
  y_pred = cross_val_predict(model, X, y, cv=cv, n_jobs=-1)
  cm1 = confusion_matrix(y, y_pred)
  # report performance
  Accuracy = accuracy_score(y, y_pred)
  mcc = matthews_corrcoef(y, y_pred)
  auc = roc_auc_score(y, y_pred)
  sensitivity = cm1[0,0]/(cm1[0,0]+cm1[0,1])
  specificity = cm1[1,1]/(cm1[1,0]+cm1[1,1])
  APAAC_ILTrain_Metrics.loc[len(APAAC_ILTrain_Metrics.index)] = [model,Accuracy, mcc, auc, sensitivity, specificity]

APAAC_ILTrain_Metrics

APAAC_ILTrain_Metrics.to_csv("/content/drive/MyDrive/res/IL-10/coding/data_set/balanced_result/APAAC_ILTrain_Metrics.csv")
clf = StackingClassifier( estimators=estimators, final_estimator=LogisticRegression())
prob = clf.fit_transform(X, y)
pd.DataFrame(prob).to_csv("/content/drive/MyDrive/res/IL-10/coding/data_set/balanced_result/APAAC_ILTrain_Probability.csv")

print(prob)

"""#**CKSAAP_IL10**"""

CKSAAP_ILTrain  = pd.read_csv('/content/drive/MyDrive/res/IL-10/coding/data_set/imbalanced_data/CKSAAP.csv')

for column in CKSAAP_ILTrain.columns:
  CKSAAP_ILTrain[column] = pd.to_numeric(CKSAAP_ILTrain[column], errors='coerce')
  if column == 'Target':
    CKSAAP_ILTrain[column] = CKSAAP_ILTrain[column].astype('category')

CKSAAP_ILTrain.fillna(0, inplace=True)
CKSAAP_ILTrain.dtypes

CKSAAP_ILTrain.shape

#Data balancing
X = CKSAAP_ILTrain.drop(['Target'], axis=1)
y = CKSAAP_ILTrain.Target
from imblearn.over_sampling import ADASYN
ada = ADASYN(random_state=42)
X, y = ada.fit_resample(X, y)
y.value_counts()

# X = CKSAAP_ILTrain.drop(['Target'], axis=1)
# y = CKSAAP_ILTrain.Target

CKSAAP_ILTrain_Metrics = []
CKSAAP_ILTrain_Metrics = pd.DataFrame(CKSAAP_ILTrain_Metrics)
CKSAAP_ILTrain_Metrics['Classifier'] = 'Classifier'
CKSAAP_ILTrain_Metrics['Accuracy'] = 'Accuracy'
CKSAAP_ILTrain_Metrics['mcc'] = 'mcc'
CKSAAP_ILTrain_Metrics['auc'] = 'auc'
CKSAAP_ILTrain_Metrics['sensitivity'] = 'sensitivity'
CKSAAP_ILTrain_Metrics['specificity'] = 'specificity'
cv = KFold(n_splits=10, random_state=1, shuffle=True)
# create model
models = [LogisticRegression(),
          RandomForestClassifier(),
          SVC(),
          XGBClassifier(),
          DecisionTreeClassifier(),
          KNeighborsClassifier(),
          LGBMClassifier(),
          stack]
for model in models:
  # evaluate model
  # scores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)
  y_pred = cross_val_predict(model, X, y, cv=cv, n_jobs=-1)
  cm1 = confusion_matrix(y, y_pred)
  # report performance
  Accuracy = accuracy_score(y, y_pred)
  mcc = matthews_corrcoef(y, y_pred)
  auc = roc_auc_score(y, y_pred)
  sensitivity = cm1[0,0]/(cm1[0,0]+cm1[0,1])
  specificity = cm1[1,1]/(cm1[1,0]+cm1[1,1])
  CKSAAP_ILTrain_Metrics.loc[len(CKSAAP_ILTrain_Metrics.index)] = [model,Accuracy, mcc,auc,sensitivity,specificity]

CKSAAP_ILTrain_Metrics.to_csv("/content/drive/MyDrive/res/IL-10/coding/data_set/balanced_result/CKSAAP_ILTrain_Metrics.csv")
clf = StackingClassifier( estimators=estimators, final_estimator=LogisticRegression())
prob = clf.fit_transform(X, y)
pd.DataFrame(prob).to_csv("/content/drive/MyDrive/res/IL-10/coding/data_set/balanced_result/CKSAAP_ILTrain_Probability.csv")

CKSAAP_ILTrain_Metrics

print(prob)

"""#**TPC_IL10**"""

TPC_ILTrain  = pd.read_csv('/content/drive/MyDrive/res/IL-10/coding/data_set/imbalanced_data/TPC.csv')

for column in TPC_ILTrain.columns:
  TPC_ILTrain[column] = pd.to_numeric(TPC_ILTrain[column], errors='coerce')
  if column == 'Target':
    TPC_ILTrain[column] = TPC_ILTrain[column].astype('category')

TPC_ILTrain.fillna(0, inplace=True)
TPC_ILTrain.dtypes

TPC_ILTrain.shape

#Data balancing
X = TPC_ILTrain.drop(['Target'], axis=1)
y = TPC_ILTrain.Target
from imblearn.over_sampling import ADASYN
ada = ADASYN(random_state=42)
X, y = ada.fit_resample(X, y)
y.value_counts()

# X = TPC_ILTrain.drop(['Target'], axis=1)
# y = TPC_ILTrain.Target

TPC_ILTrain_Metrics = []
TPC_ILTrain_Metrics = pd.DataFrame(TPC_ILTrain_Metrics)
TPC_ILTrain_Metrics['Classifier'] = 'Classifier'
TPC_ILTrain_Metrics['Accuracy'] = 'Accuracy'
TPC_ILTrain_Metrics['mcc'] = 'mcc'
TPC_ILTrain_Metrics['auc'] = 'auc'
TPC_ILTrain_Metrics['sensitivity'] = 'sensitivity'
TPC_ILTrain_Metrics['specificity'] = 'specificity'
cv = KFold(n_splits=10, random_state=1, shuffle=True)
# create model
models = [LogisticRegression(),
          RandomForestClassifier(),
          SVC(),
          XGBClassifier(),
          DecisionTreeClassifier(),
          KNeighborsClassifier(),
          LGBMClassifier(),
          stack]
for model in models:
  # evaluate model
  # scores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)
  y_pred = cross_val_predict(model, X, y, cv=cv, n_jobs=-1)
  cm1 = confusion_matrix(y, y_pred)
  # report performance
  Accuracy = accuracy_score(y, y_pred)
  mcc = matthews_corrcoef(y, y_pred)
  auc = roc_auc_score(y, y_pred)
  sensitivity = cm1[0,0]/(cm1[0,0]+cm1[0,1])
  specificity = cm1[1,1]/(cm1[1,0]+cm1[1,1])
  TPC_ILTrain_Metrics.loc[len(TPC_ILTrain_Metrics.index)] = [model,Accuracy, mcc,auc, sensitivity,specificity]

TPC_ILTrain_Metrics.to_csv('/content/drive/MyDrive/res/IL-10/coding/data_set/balanced_result/TPC_ILTrain_Metrics.csv')
clf = StackingClassifier( estimators=estimators, final_estimator=LogisticRegression())
prob = clf.fit_transform(X, y)
pd.DataFrame(prob).to_csv("/content/drive/MyDrive/res/IL-10/coding/data_set/balanced_result/TPC_ILTrain_Probability.csv")

TPC_ILTrain_Metrics

print(prob)

"""#**CTDC_IL13**"""

CTDC_ILTrain  = pd.read_csv('/content/drive/MyDrive/res/IL-10/coding/data_set/imbalanced_data/CTDC.csv')

for column in CTDC_ILTrain.columns:
  CTDC_ILTrain[column] = pd.to_numeric(CTDC_ILTrain[column], errors='coerce')
  if column == 'Target':
    CTDC_ILTrain[column] = CTDC_ILTrain[column].astype('category')

CTDC_ILTrain.fillna(0, inplace=True)
CTDC_ILTrain.dtypes

CTDC_ILTrain.shape

#Data balancing
X = CTDC_ILTrain.drop(['Target'], axis=1)
y = CTDC_ILTrain.Target
from imblearn.over_sampling import ADASYN
ada = ADASYN(random_state=42)
X, y = ada.fit_resample(X, y)
y.value_counts()

# X = CTDC_ILTrain.drop(['Target'], axis=1)
# y = CTDC_ILTrain.Target

CTDC_ILTrain_Metrics = []
CTDC_ILTrain_Metrics = pd.DataFrame(CTDC_ILTrain_Metrics)
CTDC_ILTrain_Metrics['Classifier'] = 'Classifier'
CTDC_ILTrain_Metrics['Accuracy'] = 'Accuracy'
CTDC_ILTrain_Metrics['mcc'] = 'mcc'
CTDC_ILTrain_Metrics['auc'] = 'auc'
CTDC_ILTrain_Metrics['sensitivity'] = 'sensitivity'
CTDC_ILTrain_Metrics['specificity'] = 'specificity'
cv = KFold(n_splits=10, random_state=1, shuffle=True)
# create model
models = [LogisticRegression(),
          RandomForestClassifier(),
          SVC(),
          XGBClassifier(),
          DecisionTreeClassifier(),
          KNeighborsClassifier(),
          LGBMClassifier(),
          stack]
for model in models:
  # evaluate model
  # scores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)
  y_pred = cross_val_predict(model, X, y, cv=cv, n_jobs=-1)
  cm1 = confusion_matrix(y, y_pred)
  # report performance
  Accuracy = accuracy_score(y, y_pred)
  mcc = matthews_corrcoef(y, y_pred)
  auc = roc_auc_score(y, y_pred)
  sensitivity = cm1[0,0]/(cm1[0,0]+cm1[0,1])
  specificity = cm1[1,1]/(cm1[1,0]+cm1[1,1])
  CTDC_ILTrain_Metrics.loc[len(CTDC_ILTrain_Metrics.index)] = [model,Accuracy, mcc,auc, sensitivity, specificity]

CTDC_ILTrain_Metrics.to_csv("/content/drive/MyDrive/res/IL-10/coding/data_set/balanced_result/CTDC_ILTrain_Metrics.csv")
clf = StackingClassifier( estimators=estimators, final_estimator=LogisticRegression())
prob = clf.fit_transform(X, y)
pd.DataFrame(prob).to_csv("/content/drive/MyDrive/res/IL-10/coding/data_set/balanced_result/CTDC_ILTrain_Probability.csv")

CTDC_ILTrain_Metrics

print(prob)

"""#**CTriad_IL13**"""

CTriad_ILTrain  = pd.read_csv('/content/drive/MyDrive/res/IL-10/coding/data_set/imbalanced_data/CTraid.csv')

for column in CTriad_ILTrain.columns:
  CTriad_ILTrain[column] = pd.to_numeric(CTriad_ILTrain[column], errors='coerce')
  if column == 'Target':
    CTriad_ILTrain[column] = CTriad_ILTrain[column].astype('category')

CTriad_ILTrain.fillna(0, inplace=True)
CTriad_ILTrain.dtypes

CTriad_ILTrain.shape

#Data balancing
X = CTriad_ILTrain.drop(['Target'], axis=1)
y = CTriad_ILTrain.Target
from imblearn.over_sampling import ADASYN
ada = ADASYN(random_state=42)
X, y = ada.fit_resample(X, y)
y.value_counts()

# X = CTriad_ILTrain.drop(['Target'], axis=1)
# y = CTriad_ILTrain.Target

CTriad_ILTrain_Metrics = []
CTriad_ILTrain_Metrics = pd.DataFrame(CTriad_ILTrain_Metrics)
CTriad_ILTrain_Metrics['Classifier'] = 'Classifier'
CTriad_ILTrain_Metrics['Accuracy'] = 'Accuracy'
CTriad_ILTrain_Metrics['mcc'] = 'mcc'
CTriad_ILTrain_Metrics['auc'] = 'auc'
CTriad_ILTrain_Metrics['sensitivity'] = 'sensitivity'
CTriad_ILTrain_Metrics['specificity'] = 'specificity'
cv = KFold(n_splits=10, random_state=1, shuffle=True)
# create model
models = [LogisticRegression(),
          RandomForestClassifier(),
          SVC(),
          XGBClassifier(),
          DecisionTreeClassifier(),
          KNeighborsClassifier(),
          LGBMClassifier(),
          stack]
for model in models:
  # evaluate model
  # scores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)
  y_pred = cross_val_predict(model, X, y, cv=cv, n_jobs=-1)
  cm1 = confusion_matrix(y, y_pred)
  # report performance
  Accuracy = accuracy_score(y, y_pred)
  mcc = matthews_corrcoef(y, y_pred)
  auc = roc_auc_score(y, y_pred)
  sensitivity = cm1[0,0]/(cm1[0,0]+cm1[0,1])
  specificity = cm1[1,1]/(cm1[1,0]+cm1[1,1])
  CTriad_ILTrain_Metrics.loc[len(CTriad_ILTrain_Metrics.index)] = [model,Accuracy, mcc,auc, sensitivity, specificity]

CTriad_ILTrain_Metrics.to_csv("/content/drive/MyDrive/res/IL-10/coding/data_set/balanced_result/CTriad_ILTrain_Metrics.csv")
clf = StackingClassifier( estimators=estimators, final_estimator=LogisticRegression())
prob = clf.fit_transform(X, y)
pd.DataFrame(prob).to_csv("/content/drive/MyDrive/res/IL-10/coding/data_set/balanced_result/CTriad_ILTrain_Probability.csv")

CTriad_ILTrain_Metrics

print(prob)

"""#**DPC_IL13**"""

DPC_ILTrain  = pd.read_csv('/content/drive/MyDrive/res/IL-10/coding/data_set/imbalanced_data/DPC.csv')

for column in DPC_ILTrain.columns:
  DPC_ILTrain[column] = pd.to_numeric(DPC_ILTrain[column], errors='coerce')
  if column == 'Target':
    DPC_ILTrain[column] = DPC_ILTrain[column].astype('category')

DPC_ILTrain.fillna(0, inplace=True)
DPC_ILTrain.dtypes

DPC_ILTrain.shape

#Data balancing
X = DPC_ILTrain.drop(['Target'], axis=1)
y = DPC_ILTrain.Target
from imblearn.over_sampling import ADASYN
ada = ADASYN(random_state=42)
X, y = ada.fit_resample(X, y)
y.value_counts()

# X = DPC_ILTrain.drop(['Target'], axis=1)
# y = DPC_ILTrain.Target

DPC_ILTrain_Metrics = []
DPC_ILTrain_Metrics = pd.DataFrame(DPC_ILTrain_Metrics)
DPC_ILTrain_Metrics['Classifier'] = 'Classifier'
DPC_ILTrain_Metrics['Accuracy'] = 'Accuracy'
DPC_ILTrain_Metrics['mcc'] = 'mcc'
DPC_ILTrain_Metrics['auc'] = 'auc'
DPC_ILTrain_Metrics['sensitivity'] = 'sensitivity'
DPC_ILTrain_Metrics['specificity'] = 'specificity'
cv = KFold(n_splits=10, random_state=1, shuffle=True)
# create model
models = [LogisticRegression(),
          RandomForestClassifier(),
          SVC(),
          XGBClassifier(),
          DecisionTreeClassifier(),
          KNeighborsClassifier(),
          LGBMClassifier(),
          stack]
for model in models:
  # evaluate model
  # scores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)
  y_pred = cross_val_predict(model, X, y, cv=cv, n_jobs=-1)
  cm1 = confusion_matrix(y, y_pred)
  # report performance
  Accuracy = accuracy_score(y, y_pred)
  mcc = matthews_corrcoef(y, y_pred)
  auc = roc_auc_score(y, y_pred)
  sensitivity = cm1[0,0]/(cm1[0,0]+cm1[0,1])
  specificity = cm1[1,1]/(cm1[1,0]+cm1[1,1])
  DPC_ILTrain_Metrics.loc[len(DPC_ILTrain_Metrics.index)] = [model,Accuracy, mcc,auc, sensitivity, specificity]

DPC_ILTrain_Metrics.to_csv("/content/drive/MyDrive/res/IL-10/coding/data_set/balanced_result/DPC_ILTrain_Metrics.csv")
clf = StackingClassifier( estimators=estimators, final_estimator=LogisticRegression())
prob = clf.fit_transform(X, y)
pd.DataFrame(prob).to_csv("/content/drive/MyDrive/res/IL-10/coding/data_set/balanced_result/DPC_ILTrain_Probability.csv")

DPC_ILTrain_Metrics

print(prob)

"""#**Moran_IL13**"""

Moran_ILTrain  = pd.read_csv('/content/drive/MyDrive/res/IL-10/coding/data_set/imbalanced_data/MORAN.csv')

Moran_ILTrain.shape

for column in Moran_ILTrain.columns:
  Moran_ILTrain[column] = pd.to_numeric(Moran_ILTrain[column], errors='coerce')
  if column == 'Target':
    Moran_ILTrain[column] = Moran_ILTrain[column].astype('category')

Moran_ILTrain.fillna(0, inplace=True)
Moran_ILTrain.dtypes

#Data balancing
X = Moran_ILTrain.drop(['Target'], axis=1)
y = Moran_ILTrain.Target
from imblearn.over_sampling import ADASYN
ada = ADASYN(random_state=42)
X, y = ada.fit_resample(X, y)
y.value_counts()

# X = Moran_ILTrain.drop(['Target'], axis=1)
# y = Moran_ILTrain.Target

Moran_ILTrain_Metrics = []
Moran_ILTrain_Metrics = pd.DataFrame(Moran_ILTrain_Metrics)
Moran_ILTrain_Metrics['Classifier'] = 'Classifier'
Moran_ILTrain_Metrics['Accuracy'] = 'Accuracy'
Moran_ILTrain_Metrics['mcc'] = 'mcc'
Moran_ILTrain_Metrics['auc'] = 'auc'
Moran_ILTrain_Metrics['sensitivity'] = 'sensitivity'

Moran_ILTrain_Metrics['specificity'] = 'specificity'
cv = KFold(n_splits=10, random_state=1, shuffle=True)
# create model
models = [LogisticRegression(),
          RandomForestClassifier(),
          SVC(),
          XGBClassifier(),
          DecisionTreeClassifier(),
          KNeighborsClassifier(),
          LGBMClassifier(),
          stack]
for model in models:
  # evaluate model
  # scores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)
  y_pred = cross_val_predict(model, X, y, cv=cv, n_jobs=-1)
  cm1 = confusion_matrix(y, y_pred)
  # report performance
  Accuracy = accuracy_score(y, y_pred)
  mcc = matthews_corrcoef(y, y_pred)
  auc = roc_auc_score(y, y_pred)
  sensitivity = cm1[0,0]/(cm1[0,0]+cm1[0,1])
  specificity = cm1[1,1]/(cm1[1,0]+cm1[1,1])
  Moran_ILTrain_Metrics.loc[len(Moran_ILTrain_Metrics.index)] = [model,Accuracy, mcc,auc, sensitivity, specificity]

Moran_ILTrain_Metrics.to_csv("/content/drive/MyDrive/res/IL-10/coding/data_set/balanced_result/Moran_ILTrain_Metrics.csv")
clf = StackingClassifier( estimators=estimators, final_estimator=LogisticRegression())
prob = clf.fit_transform(X, y)
pd.DataFrame(prob).to_csv("/content/drive/MyDrive/res/IL-10/coding/data_set/balanced_result/Moran_ILTrain_Probability.csv")

Moran_ILTrain_Metrics

print(prob)

"""#**PAAC_IL13**"""

PAAC_ILTrain  = pd.read_csv('/content/drive/MyDrive/res/IL-10/coding/data_set/imbalanced_data/PAAC.csv')

for column in PAAC_ILTrain.columns:
  PAAC_ILTrain[column] = pd.to_numeric(PAAC_ILTrain[column], errors='coerce')
  if column == 'Target':
    PAAC_ILTrain[column] = PAAC_ILTrain[column].astype('category')

PAAC_ILTrain.fillna(0, inplace=True)
PAAC_ILTrain.dtypes

PAAC_ILTrain.shape

#Data balancing
X = PAAC_ILTrain.drop(['Target'], axis=1)
y = PAAC_ILTrain.Target
from imblearn.over_sampling import ADASYN
ada = ADASYN(random_state=42)
X, y = ada.fit_resample(X, y)
y.value_counts()

# X = PAAC_ILTrain.drop(['Target'], axis=1)
# y = PAAC_ILTrain.Target

PAAC_ILTrain_Metrics = []
PAAC_ILTrain_Metrics = pd.DataFrame(PAAC_ILTrain_Metrics)
PAAC_ILTrain_Metrics['Classifier'] = 'Classifier'
PAAC_ILTrain_Metrics['Accuracy'] = 'Accuracy'
PAAC_ILTrain_Metrics['mcc'] = 'mcc'
PAAC_ILTrain_Metrics['auc'] = 'auc'
PAAC_ILTrain_Metrics['sensitivity'] = 'sensitivity'
PAAC_ILTrain_Metrics['specificity'] = 'specificity'
cv = KFold(n_splits=10, random_state=1, shuffle=True)
# create model
models = [LogisticRegression(),
          RandomForestClassifier(),
          SVC(),
          XGBClassifier(),
          DecisionTreeClassifier(),
          KNeighborsClassifier(),
          LGBMClassifier(),
          stack]
for model in models:
  # evaluate model
  # scores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)
  y_pred = cross_val_predict(model, X, y, cv=cv, n_jobs=-1)
  cm1 = confusion_matrix(y, y_pred)
  # report performance
  Accuracy = accuracy_score(y, y_pred)
  mcc = matthews_corrcoef(y, y_pred)
  auc = roc_auc_score(y, y_pred)
  sensitivity = cm1[0,0]/(cm1[0,0]+cm1[0,1])
  specificity = cm1[1,1]/(cm1[1,0]+cm1[1,1])
  PAAC_ILTrain_Metrics.loc[len(PAAC_ILTrain_Metrics.index)] = [model,Accuracy, mcc,auc, sensitivity, specificity]

PAAC_ILTrain_Metrics.to_csv("/content/drive/MyDrive/res/IL-10/coding/data_set/balanced_result/PAAC_ILTrain_Metrics.csv")
clf = StackingClassifier( estimators=estimators, final_estimator=LogisticRegression())
prob = clf.fit_transform(X, y)
pd.DataFrame(prob).to_csv("/content/drive/MyDrive/res/IL-10/coding/data_set/balanced_result/PAAC_ILTrain_Probability.csv")

PAAC_ILTrain_Metrics

print(prob)

"""#**PseKRAAC_IL13**"""

PseKRAAC_ILTrain  = pd.read_csv('/content/drive/MyDrive/res/IL-10/coding/data_set/imbalanced_data/PSE.csv')

for column in PseKRAAC_ILTrain.columns:
  PseKRAAC_ILTrain[column] = pd.to_numeric(PseKRAAC_ILTrain[column], errors='coerce')
  if column == 'Target ':
    PseKRAAC_ILTrain[column] = PseKRAAC_ILTrain[column].astype('category')

PseKRAAC_ILTrain.fillna(0, inplace=True)
PseKRAAC_ILTrain.dtypes

PseKRAAC_ILTrain.shape

X = PseKRAAC_ILTrain.drop(['Target'], axis=1)
y = PseKRAAC_ILTrain['Target']
from imblearn.over_sampling import ADASYN
ada = ADASYN(random_state=42)
X, y = ada.fit_resample(X, y)
y.value_counts()

# X = PseKRAAC_ILTrain.drop(['Target'], axis=1)
# y = PseKRAAC_ILTrain['Target']

PseKRAAC_ILTrain_Metrics = []
PseKRAAC_ILTrain_Metrics = pd.DataFrame(PseKRAAC_ILTrain_Metrics)
PseKRAAC_ILTrain_Metrics['Classifier'] = 'Classifier'
PseKRAAC_ILTrain_Metrics['Accuracy'] = 'Accuracy'
PseKRAAC_ILTrain_Metrics['mcc'] = 'mcc'
PseKRAAC_ILTrain_Metrics['auc'] = 'auc'
PseKRAAC_ILTrain_Metrics['sensitivity'] = 'sensitivity'
PseKRAAC_ILTrain_Metrics['specificity'] = 'specificity'
cv = KFold(n_splits=10, random_state=1, shuffle=True)
# create model
models = [LogisticRegression(),
          RandomForestClassifier(),
          SVC(),
          XGBClassifier(),
          DecisionTreeClassifier(),
          KNeighborsClassifier(),
          LGBMClassifier(),
          stack]
for model in models:
  # evaluate model
  # scores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)
  y_pred = cross_val_predict(model, X, y, cv=cv, n_jobs=-1)
  cm1 = confusion_matrix(y, y_pred)
  # report performance
  Accuracy = accuracy_score(y, y_pred)
  mcc = matthews_corrcoef(y, y_pred)
  auc = roc_auc_score(y, y_pred)
  sensitivity = cm1[0,0]/(cm1[0,0]+cm1[0,1])
  specificity = cm1[1,1]/(cm1[1,0]+cm1[1,1])
  PseKRAAC_ILTrain_Metrics.loc[len(PseKRAAC_ILTrain_Metrics.index)] = [model,Accuracy, mcc,auc, sensitivity, specificity]

PseKRAAC_ILTrain_Metrics.to_csv("/content/drive/MyDrive/res/IL-10/coding/data_set/balanced_result/PseKRAAC_ILTrain_Metrics.csv")
clf = StackingClassifier( estimators=estimators, final_estimator=LogisticRegression())
prob = clf.fit_transform(X, y)
pd.DataFrame(prob).to_csv("/content/drive/MyDrive/res/IL-10/coding/data_set/balanced_result/PseKRAAC_ILTrain_Probability.csv")

PseKRAAC_ILTrain_Metrics

print(prob)